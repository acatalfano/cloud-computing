---
#   vvvv TODO: try this... maybe not brokerId!!!
#   brokerId





# TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO
# TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO
#
#
# LOOK AT ALL 5 PARTS HERE! vvvvvv
#
#
# https://strimzi.io/blog/2019/04/17/accessing-kafka-part-1/
#
#
#
#
# ORRR HERE!!! vvvvvvv
#
#
# https://www.wise.jobs/2021/09/23/running-kafka-in-kubernetes-part-2-how-we-migrated-our-kafka-clusters-to-kubernetes/
#
#
# TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO
# TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO


















apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-deployment
spec:
  replicas: 1 # 5 # 1   TODO: drop this endeavor and go back to just creating 5 deployments if this doesn't go smoothely
  selector:
    matchLabels:
      app: kafka
  minReadySeconds: 5
  template:
    metadata:
      labels:
        app: kafka
    spec:
      restartPolicy: Always
      containers:
      - name: kafka
        # ansible needs to replace the "1.2.3.4"
        image: 1.2.3.4:5000/teamx-kafka-base:latest
        imagePullPolicy: Always
        # env:
        # - name: BROKER_ID
        #   value: "{{ brokerId }}" # "{{ brokerId | default(0) }}"
        ports:
        - containerPort: 9092
        env:
        - name: KAFKA_BIN_FILE
          value: NEW BIN FILE VALUE
        - name: KAFKA_PROPS_FILE
          value: NEW PROPS FILE VALUE
        - name: KAFKA_API_VERSIONS_BIN_FILE
          value: PATH OF API VERSIONS BIN
        - name: ADVERTISED_IP
          value: ADVERTISED IP VALUE
        - name: ZOOKEEPER_IP
          value: ZOOKEEPER IP VALUE
        - name: BROKER_ID
          value: BROKER ID VALUE
        # command: ['/bin/bash', '-c', $(KAFKA_BIN_FILE)]
        # args:
        command:
        # - /bin/sh
        # - -c
        # args:
        # - set BROKER_ID=date +%s%N &&
        - $(KAFKA_BIN_FILE)
        - $(KAFKA_PROPS_FILE)
        - --override
        - listeners=PLAINTEXT://:9092
        - --override
        - advertised.listeners=PLAINTEXT://$(ADVERTISED_IP):9092
        - --override
        - listener.security.protocol.map=PLAINTEXT
        - --override
        - listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL
        - --override
        - zookeeper.connect=$(ZOOKEEPER_IP):2181
        - --override
        - broker.id=$(BROKER_ID)
        # - 'broker.id=$(date +%s%N)'
        # command: [daemon]
        # args:
        # - --
        # - $(KAFKA_DIRECTORY)/bin/kafka-server-start.sh
        # - $(KAFKA_DIRECTORY)/config/server.properties
        # - --override
        # - broker.id=$(date %s%N)
        #- "broker.id=$((BROKER_ID = BROKER_ID + 1))"

        # readinessProve:
        #   initialDelaySeconds: 10
        #   timeoutSeconds: 5
        #   exec:
        #     command:
        #     - sh
        #     - -c
        #     - "$(KAFKA_API_VERSIONS_BIN_FILE) --bootstrap-server=localhost:9092"
...

# spec.template.spec.containers[0].env

# kubectl get pod -l app=couchdb -o json | jq -r '.items[0].metadata.name'
#  >>> POD-NAME
# (no surrounding quotes with -r option)

# download and install helm:
#   curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
#   echo "deb https://baltocdn.com/helm/stable/debian all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
#   sudo apt-get update
#   sudo apt-get -y install helm


# helm repo add couchdb https://apache.github.io/couchdb-helm

# helm install teamx-release couchdb/couchdb \
#   --set allowAdminParty=true \
#   --set couchdbConfig.couchdb.uuid=$(curl https://www.uuidgenerator.net/api/version4 2>/dev/null | tr -d -)


# TODO: TODO: TODO:
#   rn doing it the helm way, the "-c" part of last "exec" cmd fails b/c
#       not starting containers since not provided with a COUCHDB_PASSWORD or COUCHDB_USER!!!
#                     ^^^^^ ANYWAY TO PROVIDE THESE ENV CONFIGS? OR AM I MISSING IT IN THE SETUP INSTRUCTIONS???
#                             (or maybe just take what you're missing from the helm src!!!!)
#
#     look here about "expose types" (i.e. service types) https://itnext.io/kubernetes-clusterip-vs-nodeport-vs-loadbalancer-services-and-ingress-an-overview-with-722a07f3cfe1
#       here about couchdb helm https://docs.couchdb.org/en/stable/install/kubernetes.html
#         and here https://artifacthub.io/packages/helm/couchdb/couchdb
#             ^^^^ see the configuration section at the bottom...seems user/pswd should be getting provided rn??????
#                                               https://artifacthub.io/packages/helm/couchdb/couchdb#configuration
#
#     QUICK LINK TO THE BOX PRESENTATION!!!! https://vanderbilt.app.box.com/s/n9kfkez0yvgq1vzugak59grdq0ks334j/file/729744520505

# TODO: TODO: TODO:
#     when done manually seems to work, but still can't access it from outside???? does it need some other port enabled????
#         or port forwarding????
#         checkout that one itnext.io link and look at documentation on service-types on kubernetes site!



# Apache CouchDB is starting. Check the status of the Pods using:

#   kubectl get pods --namespace default -l "app=couchdb,release=teamx-release"
#
#   actually do this one!
#
#   kubectl get pods --namespace default -l "app=couchdb,release=teamx-release" -o json | jq '.items[].status.phase' -r
#       >>>> 3 lines reading "Running" (when it works!)

# kubectl get pods -l app=couchdb -o json | jq -r '.items[0].spec.containers[0].name'
#   for the "-c" argument down there vvvvvv (when you run this the non-helm way)

# Once all of the Pods are fully Ready, execute the following command to create
# some required system databases:

#   kubectl exec --namespace default teamx-release-couchdb-0 -c couchdb -- \
#     curl -s \
#     http://127.0.0.1:5984/_cluster_setup \
#     -X POST \
#     -H "Content-Type: application/json" \
#     -d '{"action": "finish_cluster"}'